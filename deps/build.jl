using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libfreetype"], :libfreetype),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/FreeTypeBuilder/releases/download/v2.9"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.aarch64-linux-gnu.tar.gz", "9c5c14749702c26181f593662418bbd1bf6179ffbb1d5d728de173825aa6cc40"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/FreeType2.arm-linux-gnueabihf.tar.gz", "28232b19f746e290a45a1eb151dd2491b976e8296e76eaa518e8db884df9516e"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.i686-linux-gnu.tar.gz", "a01458a413c9148dc387f8acc8c88df457a12a57e59e59187a3e5a9fe8859b12"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/FreeType2.i686-w64-mingw32.tar.gz", "88a7b31938eac0aa356fc7b4715a74fba07db4cf77bb12f2c1ae0c7fc70c216b"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.powerpc64le-linux-gnu.tar.gz", "36388c3ddabaef23fe535778059191cbe25ccace246d6eb9043c477602ee55cb"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/FreeType2.x86_64-apple-darwin14.tar.gz", "ab95d6da4e11d5550951bf58bf0daedca319c1376018400bf05f3f4de5fa1eb0"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.x86_64-linux-gnu.tar.gz", "dccf1fbef6f1e382d422f60d4aef2270ff3a37faf34891ae1689a60037d26b7f"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/FreeType2.x86_64-w64-mingw32.tar.gz", "e7209e83acd354876bd7d9df4dc6d9cd4404b79b49a36c0ee779a6e6155b2826"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
