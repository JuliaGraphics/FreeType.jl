using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libfreetype"], :libfreetype),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGraphics/FreeTypeBuilder/releases/download/v2.9.0-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.aarch64-linux-gnu.tar.gz", "57c5af29c4d43f999f0de9d5199edaa5a3abd74c447631ac901d653aaa8ae955"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/FreeType2.arm-linux-gnueabihf.tar.gz", "9d03379a85be8f949122e91b43f60d19de512ddac3bf6cccd59b1504f22bfc78"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.i686-linux-gnu.tar.gz", "13b0c94e1ae07c509d87689df0ce8dc6f652f7df66f7a9158ef9c0baf9c614fc"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/FreeType2.i686-w64-mingw32.tar.gz", "c591c351260146a7f167320108f5fcd0d201ccda0693fd712b2dbafa1b197e30"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.powerpc64le-linux-gnu.tar.gz", "c4d04a161cb5e8709833f64f4565dfcad4d058b7f0a93e8c721f1839283a6481"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/FreeType2.x86_64-apple-darwin14.tar.gz", "cb3c67eaeff211b9288ea0fb3cf76846177fbb040be60a827b0eb35fbf8ad1b2"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/FreeType2.x86_64-linux-gnu.tar.gz", "a5c5f484959584965c1f9fd8bc56eb7883cd4f20bf6564400489ddfaadde06b7"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/FreeType2.x86_64-w64-mingw32.tar.gz", "814a61adad839248fe21ef982eec4f1f4dfc1502cd202b39b9fbb857b167fa55"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
